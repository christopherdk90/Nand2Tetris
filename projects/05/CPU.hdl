// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution: 111 a cccccc ddd jjj = 111a cccc ccdd djjj
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	
	// A-instruction (msb = 0)
	// op-code and 15-bit value
	// Store value into A-register
	// Output the value
	 
	// C-instruction (msb = 1)
	// op-code, ALU control bits, destination load bits, jump bits
	// Route bits to chip-part destinations
	// chip-parts execute instruction
	
	// Isolate msb and store for both types of instructions
	And(a=instruction[15], b=true, out=instructC);
	Not(in=instructC, out=instructA);
	

	
	// First Mux16
	// C instruction uses ALU output; A instruction uses the 15-bit input
	Mux16 (a=aluOUT, b=instruction, sel=instructA, out[0..15]=firstMUX);
	
	// Two cases for writing to A-register: 
	// 1) C-instruction with control bit
	And(a=instructC, b=instruction[5], out=CloadA);
	// 2) A-instruction
    Or(a=instructA, b=CloadA, out=loadA);

	// A Register
	// Store mux output into A-register in above two cases
	ARegister(in=firstMUX, load=loadA, out[0..14]=addressM, out[0..15]=aOUT);
	
	// Second Mux16
	// ALU Y data is from either the A-register or inM based on control bit [12]
	Mux16 (a=aOUT, b=inM, sel=instruction[12], out=secondMUX);
	
	// ALU
	ALU (x=dOUT, y=secondMUX, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOUT, out=outM, zr=aluZR, ng=aluNG);
	// Handle ALU outputs
	
	// get not Zero
	Not(in=aluZR, out=notZR);
	// get not Negative
	Not(in=aluNG, out=notNG);
	// if it's not zero and not negative, it's positive:
	And(a=notZR, b=notNG, out=aluPOS);
	
	
	// One case for writing to D-register:
	// 1) C-instruction with control bit
	And(a=instructC, b=instruction[4], out=loadD);
	
	// D Register
	DRegister(in=aluOUT, load=loadD, out[0..15]=dOUT);
	
	// Set writeM bit
	And(a=instructC, b=instruction[3], out=writeM);
	
	
	// Program Counter
	
	// Determine active jump bits based on instruction bits
	And(a=instruction[2], b=aluNG, out=ngActive);
	And(a=instruction[1], b=aluZR, out=zrActive);
	And(a=instruction[0], b=aluPOS, out=posActive);
	
	// Determine active jump bits based on instruction type
	And(a=instructC, b=ngActive, out=ngJump);
	And(a=instructC, b=zrActive, out=zrJump);
	And(a=instructC, b=posActive, out=posJump);
	
	// Determine if load is active
	Or(a=ngJump, b=zrJump, out=ngORzr);
	Or(a=ngORzr, b=posJump, out=pcLOAD);
	
	PC(in=aOUT, load=pcLOAD, inc=true, reset=reset, out[0..14]=pc);
	
	

	
}