// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:


	// zero x
	Mux16(a=x[0..15], b=false, sel=zx, out[0..15]=zeroX);

	// not X
	Not16(in[0..15]=zeroX, out[0..15]=notX);

	// select negated X
	Mux16(a[0..15]=zeroX, b[0..15]=notX, sel=nx, out[0..15]=outX);

	// zero y
	Mux16(a=y[0..15], b=false, sel=zy, out[0..15]=zeroY);

	// not Y
	Not16(in[0..15]=zeroY, out[0..15]=notY);

	// select negated Y
	Mux16(a[0..15]=zeroY, b[0..15]=notY, sel=ny, out[0..15]=outY);	

	// compute function results:
	Add16(a[0..15]=outX, b[0..15]=outY, out[0..15]=addResult);
	And16(a[0..15]=outX, b[0..15]=outY, out[0..15]=andResult);
	
	// select function results:
	Mux16(a[0..15]=andResult, b[0..15]=addResult, sel=f, out[0..15]=outF);

	// Negated output:
	Not16(in[0..15]=outF, out[0..15]=invF);

	// select results or negated:
	Mux16(a[0..15]=outF, b[0..15]=invF, sel=no, out=out[0..15], out[0..7]=intOut1, out[8..15]=intOut2, out[15]=ngOut);

	// set ng 
	Or(a=ngOut, b=false, out=ng);
	
	// set zr
	Or8Way(in[0..7]=intOut1, out=orOne);
	Or8Way(in[0..7]=intOut2, out=orTwo);
	Or(a=orOne, b=orTwo, out=intZR);
	Not(in=intZR, out=zr); 


}